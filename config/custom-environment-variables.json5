{
  port: 'RIFM_PORT',
  db: 'RIFM_DB',
  auth: {
    secret: 'RIFM_JWT_SECRET' // not used for auth purpose
  },
  dataDir: 'RIFM_DATA_DIR',

  comms: {
    strategy: 'RIFM_COMMS_STRATEGY',
    libp2p: {
      addresses: {
        listen: {
          "__name": "RIFM_COMMS_LISTEN",
          "__format": "json"
        }
      },
      config: {
        peerDiscovery: {
          bootstrap: {
            enabled: "RIFM_COMMS_BOOTSTRAP_ENABLED",
            list: {
              "__name": "RIFM_COMMS_BOOTSTRAP_LIST",
              "__format": "json"
            }
          }
        }
      }
    },
  },
  cors: {
    origin: "RIFM_CORS_ORIGIN",
    methods: "RIFM_CORS_METHODS"
  },

  blockchain: {
    provider: "RIFM_PROVIDER",
  },
  storage: {
    storageManager: {
      contractAddress: "RIFM_STORAGE_CONTRACT_ADDR",
      startingBlock: "RIFM_STORAGE_STARTING_BLOCK"
    },
    staking: {
      contractAddress: "RIFM_STAKING_CONTRACT_ADDR",
      startingBlock: "RIFM_STAKING_STARTING_BLOCK"
    }
  },
  rns: {
    owner: {
      contractAddress: "RIFM_RNS_OWNER_CONTRACT_ADDR",
      startingBlock: "RIFM_RNS_OWNER_STARTING_BLOCK"
    },
    reverse: {
      contractAddress: "RIFM_RNS_REVERSE_CONTRACT_ADDR",
      startingBlock: "RIFM_RNS_REVERSE_STARTING_BLOCK"
    },
    placement: {
      contractAddress: "RIFM_RNS_PLACEMENT_CONTRACT_ADDR",
      startingBlock: "RIFM_RNS_PLACEMENT_STARTING_BLOCK"
    },
  },
  log: {
    level: "LOG_LEVEL",
    filter: "LOG_FILTER",
    path: "LOG_PATH"
  }
}
