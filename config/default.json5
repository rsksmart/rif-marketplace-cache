// For full syntax see /src/types.ts::Config interface
{

  // Place where the DB file will be put. If relative than it is relative to `dataDir`. Absolute path is honored.
  db: 'db.sqlite',

  // Place where all the persistent data should be stored
  // Recommended is absolute path, if relative then it will be based on root of the project (not CWD)
  dataDir: 'data',

  // DB back up config
  dbBackUp: {
    blocks: 1440, // 12 hours * 60 * 60 / 30s (new block every 30s) ==> backuped twice a day

    // Place where the backups will be put. If relative than it is relative to `dataDir`. Absolute path is honored.
    path: 'db-backups'
  },

  // CORS setting, please consult https://expressjs.com/en/resources/middleware/cors.html for more details
  cors: {
    origin: '*',
    methods: 'GET,HEAD'
  },

  // libp2p
  comms: {
    strategy: 'api',
    libp2p: {
      addresses: { listen: ['/ip4/0.0.0.0/tcp/0', '/ip4/0.0.0.0/tcp/0/ws'] }
    }
  },

  notification: {
    countOfNotificationPersistedPerAgreement: 10,
    retriesCount: 3,
    retryInterval: 5000
  },

  blockchain: {
    // Specify behavior of NewBlockEmitter, that detects new blocks on blockchain.
    newBlockEmitter: {
      // If to use polling strategy, if false then listening is used.
      polling: true
    }
  },

  log: {
    level: "info",
    filter: null,
    path: null
  },

  rates: {
    enabled: true,
    provider: 'coingecko',
    refresh: 300, // 5 minutes
    fromSymbols: ['rbtc', 'rif'],
    toSymbols: ['usd', 'eur', 'btc', 'ars', 'cny', 'krw', 'jpy']
  },

  // Settings for Storage service related function
  storage: {
    // Sets if Storage service should be enabled
    enabled: true,

    // supported tokens
    tokens: {
      // Native token use zero address
      '0x0000000000000000000000000000000000000000': 'rbtc',
    },

    // Storage Manager Contract
    storageManager: {
      // Specify behavior of EventsEmitter, that retrieves events from blockchain and pass them onwards for further processing.
      eventsEmitter: {
        // Will process one event at a time
        serialProcessing: true,

        // Topics that will be listened to
        topics: [
          [ // It needs to be a "double array" because that represents an "or" of the topics and not "and"
            'TotalCapacitySet(address,uint64)',
            'BillingPlanSet(address,address,uint64,uint128)',
            'MessageEmitted(address,bytes32[])',
            'NewAgreement(bytes32[],address,address,uint64,uint64,uint128,address,uint256)',
            'AgreementFundsDeposited(bytes32,uint256,address)',
            'AgreementFundsWithdrawn(bytes32,uint256,address)',
            'AgreementFundsPayout(bytes32,uint256,address)',
            'AgreementStopped(bytes32)'
          ]
        ],

        // If to use polling strategy, if false then listening is used.
        polling: true,

        // Interval in milliseconds, how often is blockchain checked.
        pollingInterval: 5000,

        // Starting block that upon first start of the service, will the blockchain be crawled for the past events.
        startingBlock: 0,

        // Number of blocks that will be waited before passing an event for further processing.
        confirmations: 6,

        // Number of blocks that is waited AFTER the event is confirmed before it is removed from database.
        // Such parameter is needed for a REST API where a host could miss that an event has
        // full confirmations as it could be removed from the DB before the endpoint is queried.
        waitingBlockCount: 20
      }
    },

    // Staking Contract
    staking: {
      // Specify behavior of EventsEmitter, that retrieves events from blockchain and pass them onwards for further processing.
      eventsEmitter: {
        // Will process one event at a time
        serialProcessing: true,

        // Topics that will be listened to
        topics: [
          [ // It needs to be a "double array" because that represents an "or" of the topics and not "and"
            'Staked(address,uint256,uint256,address,bytes)',
            'Unstaked(address,uint256,uint256,address,bytes)',
          ]
        ],

        // If to use polling strategy, if false then listening is used.
        polling: true,

        // Interval in milliseconds, how often is blockchain checked.
        pollingInterval: 5000,

        // Starting block that upon first start of the service, will the blockchain be crawled for the past events.
        startingBlock: 0,

        // Number of blocks that will be waited before passing an event for further processing.
        confirmations: 6,

        // Number of blocks that is waited AFTER the event is confirmed before it is removed from database.
        // Such parameter is needed for a REST API where a host could miss that an event has
        // full confirmations as it could be removed from the DB before the endpoint is queried.
        waitingBlockCount: 20
      }
    }
  },

  // Settings for Triggers service related function
  triggers: {
    // Sets if Triggers service should be enabled
    enabled: false,
    refresh: 300, // 5 minutes

    // supported tokens
    tokens: {
      // Native token use zero address
      '0x0000000000000000000000000000000000000000': 'rbtc',
    },

    // Notifications Manager Contract
    notificationsManager: {
      // Specify behavior of EventsEmitter, that retrieves events from blockchain and pass them onwards for further processing.
      eventsEmitter: {
        // Will process one event at a time
        serialProcessing: true,

        // Topics that will be listened to
        topics: [
          [ // It needs to be a "double array" because that represents an "or" of the topics and not "and"
            'ProviderRegistered(address,string)',
          ]
        ],

        // If to use polling strategy, if false then listening is used.
        polling: true,

        // Interval in milliseconds, how often is blockchain checked.
        pollingInterval: 5000,

        // Starting block that upon first start of the service, will the blockchain be crawled for the past events.
        startingBlock: 0,

        // Number of blocks that will be waited before passing an event for further processing.
        confirmations: 6,

        // Number of blocks that is waited AFTER the event is confirmed before it is removed from database.
        // Such parameter is needed for a REST API where a host could miss that an event has
        // full confirmations as it could be removed from the DB before the endpoint is queried.
        waitingBlockCount: 20
      }
    },

    // Staking Contract
    staking: {
      // Specify behavior of EventsEmitter, that retrieves events from blockchain and pass them onwards for further processing.
      eventsEmitter: {
        // Will process one event at a time
        serialProcessing: true,

        // Topics that will be listened to
        topics: [
          [ // It needs to be a "double array" because that represents an "or" of the topics and not "and"
            'Staked(address,uint256,uint256,address,bytes)',
            'Unstaked(address,uint256,uint256,address,bytes)',
          ]
        ],

        // If to use polling strategy, if false then listening is used.
        polling: true,

        // Interval in milliseconds, how often is blockchain checked.
        pollingInterval: 5000,

        // Starting block that upon first start of the service, will the blockchain be crawled for the past events.
        startingBlock: 0,

        // Number of blocks that will be waited before passing an event for further processing.
        confirmations: 6,

        // Number of blocks that is waited AFTER the event is confirmed before it is removed from database.
        // Such parameter is needed for a REST API where a host could miss that an event has
        // full confirmations as it could be removed from the DB before the endpoint is queried.
        waitingBlockCount: 20
      }
    }
  },

  // Settings for RNS service related function
  rns: {
    tld: 'rsk',
    // Sets if RNS service should be enabled
    enabled: true,

    // supported tokens
    tokens: {
      // Native token use zero address
      '0x0000000000000000000000000000000000000000': 'rbtc',
    },

    groupEmitter: {
      // Will process one event at a time
      serialProcessing: true,

      // Will not order events in grouped batches from all the Emitters
      orderedProcessing: false,

      name: 'rns'
    },

    // RSKOwner contract settings
    owner: {
      // Specify behavior of EventsEmitter, that retrieves events from blockchain and pass them onwards for further processing.
      eventsEmitter: {

        // Topics that will be listened to
        topics: [
          [ // It needs to be a "double array" because that represents an "or" of the topics and not "and"
            'Transfer(address,address,uint256)',
            'ExpirationChanged(uint256,uint256)',
            'Approval(address,address,uint256)'
          ]
        ],

        // If to use polling strategy, if false then listening is used.
        polling: true,

        // Interval in milliseconds, how often is blockchain checked.
        pollingInterval: 5000,

        // Starting block that upon first start of the service, will the blockchain be crawled for the past events.
        startingBlock: 0,

        // Number of blocks that will be waited before passing an event for further processing.
        confirmations: 6,

        // Number of blocks that is waited AFTER the event is confirmed before it is removed from database.
        // Such parameter is needed for a REST API where a host could miss that an event has
        // full confirmations as it could be removed from the DB before the endpoint is queried.
        waitingBlockCount: 20
      }
    },

    // Reverse resolution contract settings
    reverse: {
      // Specify behavior of EventsEmitter, that retrieves events from blockchain and pass them onwards for further processing.
      eventsEmitter: {
        // Topics that will be listened to
        topics: [
          [ // It needs to be a "double array" because that represents an "or" of the topics and not "and"
            'NameChanged(bytes32,string)'
          ]
        ],

        // If to use polling strategy, if false then listening is used.
        polling: true,

        // Interval in milliseconds, how often is blockchain checked.
        pollingInterval: 5000,

        // Starting block that upon first start of the service, will the blockchain be crawled for the past events.
        startingBlock: 0,

        // Number of blocks that will be waited before passing an event for further processing.
        confirmations: 6,

        // Number of blocks that is waited AFTER the event is confirmed before it is removed from database.
        // Such parameter is needed for a REST API where a host could miss that an event has
        // full confirmations as it could be removed from the DB before the endpoint is queried.
        waitingBlockCount: 20
      }
    },

    // Placement contract settings
    placement: {
      // Specify behavior of EventsEmitter, that retrieves events from blockchain and pass them onwards for further processing.
      eventsEmitter: {
        // Topics that will be listened to
        topics: [
          [ // It needs to be a "double array" because that represents an "or" of the topics and not "and"
            'TokenPlaced(uint256,address,uint256)',
            'TokenUnplaced(uint256)',
            'TokenSold(uint256,address)'
          ]
        ],

        // If to use polling strategy, if false then listening is used.
        polling: true,

        // Interval in milliseconds, how often is blockchain checked.
        pollingInterval: 5000,

        // Starting block that upon first start of the service, will the blockchain be crawled for the past events.
        startingBlock: 0,

        // Number of blocks that will be waited before passing an event for further processing.
        confirmations: 6,

        // Number of blocks that is waited AFTER the event is confirmed before it is removed from database.
        // Such parameter is needed for a REST API where a host could miss that an event has
        // full confirmations as it could be removed from the DB before the endpoint is queried.
        waitingBlockCount: 20
      }
    },

    // RNS Registrar contract settings used for RNS precache
    registrar: {
      startingBlock: 0
    }
  }
}
