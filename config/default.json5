// For full syntax see /src/types.ts::Config interface

{
  db: 'sqlite:db.sqlite',

  // CORS setting, please consult https://expressjs.com/en/resources/middleware/cors.html for more details
  cors: {
    origin: '*',
    methods: 'GET,HEAD'
  },

  blockchain: {

    // Number of blocks that is waited AFTER the event is confirmed before
    // it is removed from database.
    // Such parameter is needed for a REST API where a host could miss that an event has
    // full confirmations as it could be removed from the DB before the endpoint is queried.
    waitBlockCountBeforeConfirmationRemoved: 20
  },

  log: {
    level: "info",
    filter: null,
    path: null
  },

  rates: {
    enabled: true,
    provider: 'coingecko',
    refresh: 300, // 5 minutes
    fromSymbols: ['rbtc', 'rif'],
    toSymbols: ['usd', 'eur', 'btc', 'ars', 'cny', 'krw', 'jpy']
  },

  // Settings for Storage service related function
  storage: {
    // Sets if Storage service should be enabled
    enabled: true,

    // Events that will be listened to
    events: ['TotalCapacitySet', 'MessageEmitted', 'BillingPlanSet', 'NewAgreement', 'AgreementFundsDeposited', 'AgreementFundsWithdrawn', 'AgreementFundsPayout', 'AgreementStopped'],

    // Specify behavior of EventsEmitter, that retrieves events from blockchain and pass them onwards for further processing.
    eventsEmitter: {
      // If to use polling strategy, if false then listening is used.
      polling: true,

      // Interval in milliseconds, how often is blockchain checked.
      pollingInterval: 5000,

      // Starting block that upon first start of the service, will the blockchain be crawled for the past events.
      startingBlock: "genesis",

      // Number of blocks that will be waited before passing an event for further processing.
      confirmations: 6
    },

    // Specify behavior of NewBlockEmitter, that detects new blocks on blockchain.
    newBlockEmitter: {
      // If to use polling strategy, if false then listening is used.
      polling: true
    }
  },

  // Settings for RNS service related function
  rns: {
    tld: 'rsk',
    // Sets if RNS service should be enabled
    enabled: true,

    // RSKOwner contract settings
    owner: {

      // Events that will be listened to
      events: ['Transfer', 'ExpirationChanged', 'Approval'],

      // Specify behavior of EventsEmitter, that retrieves events from blockchain and pass them onwards for further processing.
      eventsEmitter: {
        // If to use polling strategy, if false then listening is used.
        polling: true,

        // Interval in milliseconds, how often is blockchain checked.
        pollingInterval: 5000,

        // Starting block that upon first start of the service, will the blockchain be crawled for the past events.
        startingBlock: "genesis",

        // Number of blocks that will be waited before passing an event for further processing.
        confirmations: 6
      },

      // Specify behavior of NewBlockEmitter, that detects new blocks on blockchain.
      newBlockEmitter: {
        // If to use polling strategy, if false then listening is used.
        polling: true
      }
    },

    // Reverse resolution contract settings
    reverse: {

      // Events that will be listened to
      'events': ['NameChanged'],

      // Specify behavior of EventsEmitter, that retrieves events from blockchain and pass them onwards for further processing.
      eventsEmitter: {
        // If to use polling strategy, if false then listening is used.
        polling: true,

        // Interval in milliseconds, how often is blockchain checked.
        pollingInterval: 5000,

        // Starting block that upon first start of the service, will the blockchain be crawled for the past events.
        startingBlock: "genesis",

        // Number of blocks that will be waited before passing an event for further processing.
        confirmations: 6
      },

      // Specify behavior of NewBlockEmitter, that detects new blocks on blockchain.
      newBlockEmitter: {
        // If to use polling strategy, if false then listening is used.
        polling: true
      }
    },

    // Placement contract settings
    placement: {

      // Events that will be listened to
      events: ['TokenPlaced', 'TokenUnplaced', 'TokenSold'],

      // Specify behavior of EventsEmitter, that retrieves events from blockchain and pass them onwards for further processing.
      eventsEmitter: {
        // If to use polling strategy, if false then listening is used.
        polling: true,

        // Interval in milliseconds, how often is blockchain checked.
        pollingInterval: 5000,

        // Starting block that upon first start of the service, will the blockchain be crawled for the past events.
        startingBlock: "genesis",

        // Number of blocks that will be waited before passing an event for further processing.
        confirmations: 6
      },

      // Specify behavior of NewBlockEmitter, that detects new blocks on blockchain.
      newBlockEmitter: {
        // If to use polling strategy, if false then listening is used.
        polling: true
      }
    },

    // RNS Registrar contract settings used for RNS precache
    registrar: {
      startingBlock: "genesis"
    }
  }
}
